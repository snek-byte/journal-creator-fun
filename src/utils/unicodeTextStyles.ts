
export type TextStyle = string;

export const textStyles = [
  { label: 'Bold Serif', value: 'bold-serif' },
  { label: 'Math Bold', value: 'math-bold' },
  { label: 'Math Bold Italic', value: 'math-bold-italic' },
  { label: 'Math Bold Script', value: 'math-bold-script' },
  { label: 'Double-Struck', value: 'double-struck' },
  { label: 'Monospace', value: 'monospace' },
  { label: 'Fraktur', value: 'fraktur' },
  { label: 'Bold Fraktur', value: 'bold-fraktur' },
  { label: 'Sans-Serif', value: 'sans-serif' },
  { label: 'Sans-Serif Bold', value: 'sans-serif-bold' },
  { label: 'Sans-Serif Italic', value: 'sans-serif-italic' },
  { label: 'Sans-Serif Bold Italic', value: 'sans-serif-bold-italic' },
  { label: 'Script', value: 'script' },
  { label: 'Small Caps', value: 'small-caps' },
  { label: 'Circled', value: 'circled' },
  { label: 'Inverted Circled', value: 'circled-neg' },
  { label: 'Squared', value: 'squared' },
  { label: 'Inverted Squared', value: 'squared-neg' },
  { label: 'Parenthesized', value: 'parenthesized' },
  { label: 'Upside Down', value: 'upside-down' },
  { label: 'Fullwidth', value: 'fullwidth' },
  { label: 'Math Script', value: 'math-script' },
  { label: 'Strikethrough', value: 'strikethrough' },
  { label: 'Underline', value: 'underline' },
];

// Character mapping for different Unicode styles
const unicodeMap: Record<string, Record<string, string>> = {
  'bold-serif': {
    'a': 'ùêö', 'b': 'ùêõ', 'c': 'ùêú', 'd': 'ùêù', 'e': 'ùêû', 'f': 'ùêü', 'g': 'ùê†', 'h': 'ùê°', 'i': 'ùê¢', 'j': 'ùê£',
    'k': 'ùê§', 'l': 'ùê•', 'm': 'ùê¶', 'n': 'ùêß', 'o': 'ùê®', 'p': 'ùê©', 'q': 'ùê™', 'r': 'ùê´', 's': 'ùê¨', 't': 'ùê≠',
    'u': 'ùêÆ', 'v': 'ùêØ', 'w': 'ùê∞', 'x': 'ùê±', 'y': 'ùê≤', 'z': 'ùê≥',
    'A': 'ùêÄ', 'B': 'ùêÅ', 'C': 'ùêÇ', 'D': 'ùêÉ', 'E': 'ùêÑ', 'F': 'ùêÖ', 'G': 'ùêÜ', 'H': 'ùêá', 'I': 'ùêà', 'J': 'ùêâ',
    'K': 'ùêä', 'L': 'ùêã', 'M': 'ùêå', 'N': 'ùêç', 'O': 'ùêé', 'P': 'ùêè', 'Q': 'ùêê', 'R': 'ùêë', 'S': 'ùêí', 'T': 'ùêì',
    'U': 'ùêî', 'V': 'ùêï', 'W': 'ùêñ', 'X': 'ùêó', 'Y': 'ùêò', 'Z': 'ùêô',
    '0': 'ùüé', '1': 'ùüè', '2': 'ùüê', '3': 'ùüë', '4': 'ùüí', '5': 'ùüì', '6': 'ùüî', '7': 'ùüï', '8': 'ùüñ', '9': 'ùüó'
  },
  'math-bold': {
    'a': 'ùêö', 'b': 'ùêõ', 'c': 'ùêú', 'd': 'ùêù', 'e': 'ùêû', 'f': 'ùêü', 'g': 'ùê†', 'h': 'ùê°', 'i': 'ùê¢', 'j': 'ùê£',
    'k': 'ùê§', 'l': 'ùê•', 'm': 'ùê¶', 'n': 'ùêß', 'o': 'ùê®', 'p': 'ùê©', 'q': 'ùê™', 'r': 'ùê´', 's': 'ùê¨', 't': 'ùê≠',
    'u': 'ùêÆ', 'v': 'ùêØ', 'w': 'ùê∞', 'x': 'ùê±', 'y': 'ùê≤', 'z': 'ùê≥',
    'A': 'ùêÄ', 'B': 'ùêÅ', 'C': 'ùêÇ', 'D': 'ùêÉ', 'E': 'ùêÑ', 'F': 'ùêÖ', 'G': 'ùêÜ', 'H': 'ùêá', 'I': 'ùêà', 'J': 'ùêâ',
    'K': 'ùêä', 'L': 'ùêã', 'M': 'ùêå', 'N': 'ùêç', 'O': 'ùêé', 'P': 'ùêè', 'Q': 'ùêê', 'R': 'ùêë', 'S': 'ùêí', 'T': 'ùêì',
    'U': 'ùêî', 'V': 'ùêï', 'W': 'ùêñ', 'X': 'ùêó', 'Y': 'ùêò', 'Z': 'ùêô',
    '0': 'ùüé', '1': 'ùüè', '2': 'ùüê', '3': 'ùüë', '4': 'ùüí', '5': 'ùüì', '6': 'ùüî', '7': 'ùüï', '8': 'ùüñ', '9': 'ùüó'
  },
  'math-bold-italic': {
    'a': 'ùíÇ', 'b': 'ùíÉ', 'c': 'ùíÑ', 'd': 'ùíÖ', 'e': 'ùíÜ', 'f': 'ùíá', 'g': 'ùíà', 'h': 'ùíâ', 'i': 'ùíä', 'j': 'ùíã',
    'k': 'ùíå', 'l': 'ùíç', 'm': 'ùíé', 'n': 'ùíè', 'o': 'ùíê', 'p': 'ùíë', 'q': 'ùíí', 'r': 'ùíì', 's': 'ùíî', 't': 'ùíï',
    'u': 'ùíñ', 'v': 'ùíó', 'w': 'ùíò', 'x': 'ùíô', 'y': 'ùíö', 'z': 'ùíõ',
    'A': 'ùë®', 'B': 'ùë©', 'C': 'ùë™', 'D': 'ùë´', 'E': 'ùë¨', 'F': 'ùë≠', 'G': 'ùëÆ', 'H': 'ùëØ', 'I': 'ùë∞', 'J': 'ùë±',
    'K': 'ùë≤', 'L': 'ùë≥', 'M': 'ùë¥', 'N': 'ùëµ', 'O': 'ùë∂', 'P': 'ùë∑', 'Q': 'ùë∏', 'R': 'ùëπ', 'S': 'ùë∫', 'T': 'ùëª',
    'U': 'ùëº', 'V': 'ùëΩ', 'W': 'ùëæ', 'X': 'ùëø', 'Y': 'ùíÄ', 'Z': 'ùíÅ'
  },
  'math-bold-script': {
    'a': 'ùì™', 'b': 'ùì´', 'c': 'ùì¨', 'd': 'ùì≠', 'e': 'ùìÆ', 'f': 'ùìØ', 'g': 'ùì∞', 'h': 'ùì±', 'i': 'ùì≤', 'j': 'ùì≥',
    'k': 'ùì¥', 'l': 'ùìµ', 'm': 'ùì∂', 'n': 'ùì∑', 'o': 'ùì∏', 'p': 'ùìπ', 'q': 'ùì∫', 'r': 'ùìª', 's': 'ùìº', 't': 'ùìΩ',
    'u': 'ùìæ', 'v': 'ùìø', 'w': 'ùîÄ', 'x': 'ùîÅ', 'y': 'ùîÇ', 'z': 'ùîÉ',
    'A': 'ùìê', 'B': 'ùìë', 'C': 'ùìí', 'D': 'ùìì', 'E': 'ùìî', 'F': 'ùìï', 'G': 'ùìñ', 'H': 'ùìó', 'I': 'ùìò', 'J': 'ùìô',
    'K': 'ùìö', 'L': 'ùìõ', 'M': 'ùìú', 'N': 'ùìù', 'O': 'ùìû', 'P': 'ùìü', 'Q': 'ùì†', 'R': 'ùì°', 'S': 'ùì¢', 'T': 'ùì£',
    'U': 'ùì§', 'V': 'ùì•', 'W': 'ùì¶', 'X': 'ùìß', 'Y': 'ùì®', 'Z': 'ùì©'
  }
};

// Utility function to transform text based on selected style
export function applyTextStyle(text: string, style: TextStyle): string {
  if (!text) return '';
  if (!style || style === 'normal') return text;

  // Handle special styles that don't use unicode mapping
  switch (style) {
    case 'strikethrough':
      return text.split('').join('Ã∂') + 'Ã∂';
    case 'underline':
      return text.split('').join('Ã≤') + 'Ã≤';
    case 'upside-down':
      return text.split('').reverse().map(char => {
        const flippedChars: Record<string, string> = {
          'a': '…ê', 'b': 'q', 'c': '…î', 'd': 'p', 'e': '«ù', 'f': '…ü', 'g': '∆É', 'h': '…•',
          'i': '·¥â', 'j': '…æ', 'k': ' û', 'l': 'l', 'm': '…Ø', 'n': 'u', 'o': 'o', 'p': 'd',
          'q': 'b', 'r': '…π', 's': 's', 't': ' á', 'u': 'n', 'v': ' å', 'w': ' ç', 'x': 'x',
          'y': ' é', 'z': 'z', '.': 'Àô', '[': ']', '(': ')', '{': '}', '?': '¬ø', '!': '¬°',
          '"': '‚Äû', "'": ',', '‚Äø': '‚ÅÄ', '‚ÅÖ': '‚ÅÜ', '‚à¥': '‚àµ', '&': '‚Öã', '_': '‚Äæ',
          '\\': '/', '<': '>', ';': '', '‚Äø': '‚ÅÄ', '‚ÅÖ': '‚ÅÜ', '‚à¥': '‚àµ'
        };
        return flippedChars[char.toLowerCase()] || char;
      }).join('');
  }

  // Use unicode mapping for other styles
  if (unicodeMap[style]) {
    return text.split('').map(char => unicodeMap[style][char] || char).join('');
  }

  return text;
}
